diff --git a/dist/messages/ai.cjs b/dist/messages/ai.cjs
index 62e9429b574c6ab8fc029d28c53c04330596e422..a9d8b2a8f53a503632e325fd359f306d27c99e89 100644
--- a/dist/messages/ai.cjs
+++ b/dist/messages/ai.cjs
@@ -16,9 +16,9 @@ class AIMessage extends base_js_1.BaseMessage {
             invalid_tool_calls: "invalid_tool_calls",
         };
     }
-    constructor(fields, 
-    /** @deprecated */
-    kwargs) {
+    constructor(fields,
+        /** @deprecated */
+        kwargs) {
         let initParams;
         if (typeof fields === "string") {
             initParams = {
@@ -76,11 +76,18 @@ class AIMessage extends base_js_1.BaseMessage {
             writable: true,
             value: []
         });
+        Object.defineProperty(this, "usage_metadata", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: []
+        });
         if (typeof initParams !== "string") {
             this.tool_calls = initParams.tool_calls ?? this.tool_calls;
             this.invalid_tool_calls =
                 initParams.invalid_tool_calls ?? this.invalid_tool_calls;
         }
+        this.usage_metadata = initParams.usage_metadata;
     }
     static lc_name() {
         return "AIMessage";
@@ -172,11 +179,18 @@ class AIMessageChunk extends base_js_1.BaseMessageChunk {
             writable: true,
             value: []
         });
+        Object.defineProperty(this, "usage_metadata", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: []
+        });
         this.tool_call_chunks =
             initParams?.tool_call_chunks ?? this.tool_call_chunks;
         this.tool_calls = initParams?.tool_calls ?? this.tool_calls;
         this.invalid_tool_calls =
             initParams?.invalid_tool_calls ?? this.invalid_tool_calls;
+        this.usage_metadata = initParams.usage_metadata;
     }
     get lc_aliases() {
         // exclude snake case conversion to pascal case
@@ -206,6 +220,27 @@ class AIMessageChunk extends base_js_1.BaseMessageChunk {
             if (rawToolCalls !== undefined && rawToolCalls.length > 0) {
                 combinedFields.tool_call_chunks = rawToolCalls;
             }
+            if (
+                this.usage_metadata !== undefined ||
+                chunk.usage_metadata !== undefined
+            ) {
+                const left = this.usage_metadata ?? {
+                    input_tokens: 0,
+                    output_tokens: 0,
+                    total_tokens: 0,
+                };
+                const right = chunk.usage_metadata ?? {
+                    input_tokens: 0,
+                    output_tokens: 0,
+                    total_tokens: 0,
+                };
+                const usage_metadata = {
+                    input_tokens: left.input_tokens + right.input_tokens,
+                    output_tokens: left.output_tokens + right.output_tokens,
+                    total_tokens: left.total_tokens + right.total_tokens,
+                };
+                combinedFields.usage_metadata = usage_metadata;
+            }
         }
         return new AIMessageChunk(combinedFields);
     }
diff --git a/dist/messages/ai.d.ts b/dist/messages/ai.d.ts
index add0050373f91275f2b4e6a899056f1140876ede..d75679c13280044b1a6a247e41b350e75e57a2e8 100644
--- a/dist/messages/ai.d.ts
+++ b/dist/messages/ai.d.ts
@@ -3,6 +3,24 @@ import { InvalidToolCall, ToolCall, ToolCallChunk } from "./tool.js";
 export type AIMessageFields = BaseMessageFields & {
     tool_calls?: ToolCall[];
     invalid_tool_calls?: InvalidToolCall[];
+    usage_metadata?: UsageMetadata;
+};
+/**
+ * Usage metadata for a message, such as token counts.
+ */
+export type UsageMetadata = {
+    /**
+     * The count of input (or prompt) tokens.
+     */
+    input_tokens: number;
+    /**
+     * The count of output (or completion) tokens
+     */
+    output_tokens: number;
+    /**
+     * The total token count
+     */
+    total_tokens: number;
 };
 /**
  * Represents an AI message in a conversation.
@@ -10,10 +28,14 @@ export type AIMessageFields = BaseMessageFields & {
 export declare class AIMessage extends BaseMessage {
     tool_calls?: ToolCall[];
     invalid_tool_calls?: InvalidToolCall[];
+    /**
+    * If provided, token usage information associated with the message.
+    */
+    usage_metadata?: UsageMetadata;
     get lc_aliases(): Record<string, string>;
-    constructor(fields: string | AIMessageFields, 
-    /** @deprecated */
-    kwargs?: Record<string, unknown>);
+    constructor(fields: string | AIMessageFields,
+        /** @deprecated */
+        kwargs?: Record<string, unknown>);
     static lc_name(): string;
     _getType(): MessageType;
 }
@@ -29,6 +51,7 @@ export declare class AIMessageChunk extends BaseMessageChunk {
     tool_calls?: ToolCall[];
     invalid_tool_calls?: InvalidToolCall[];
     tool_call_chunks?: ToolCallChunk[];
+    usage_metadata?: UsageMetadata;
     constructor(fields: string | AIMessageChunkFields);
     get lc_aliases(): Record<string, string>;
     static lc_name(): string;
diff --git a/dist/messages/ai.js b/dist/messages/ai.js
index 132548fde9dea9274caa2ca17a87a34c0f359ed4..42ca8967d0a3d4647364e5f32f7ba90343318307 100644
--- a/dist/messages/ai.js
+++ b/dist/messages/ai.js
@@ -13,9 +13,9 @@ export class AIMessage extends BaseMessage {
             invalid_tool_calls: "invalid_tool_calls",
         };
     }
-    constructor(fields, 
-    /** @deprecated */
-    kwargs) {
+    constructor(fields,
+        /** @deprecated */
+        kwargs) {
         let initParams;
         if (typeof fields === "string") {
             initParams = {
@@ -73,11 +73,18 @@ export class AIMessage extends BaseMessage {
             writable: true,
             value: []
         });
+        Object.defineProperty(this, "usage_metadata", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: []
+        });
         if (typeof initParams !== "string") {
             this.tool_calls = initParams.tool_calls ?? this.tool_calls;
             this.invalid_tool_calls =
                 initParams.invalid_tool_calls ?? this.invalid_tool_calls;
         }
+        this.usage_metadata = initParams.usage_metadata;
     }
     static lc_name() {
         return "AIMessage";
@@ -167,11 +174,18 @@ export class AIMessageChunk extends BaseMessageChunk {
             writable: true,
             value: []
         });
+        Object.defineProperty(this, "usage_metadata", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: []
+        });
         this.tool_call_chunks =
             initParams?.tool_call_chunks ?? this.tool_call_chunks;
         this.tool_calls = initParams?.tool_calls ?? this.tool_calls;
         this.invalid_tool_calls =
             initParams?.invalid_tool_calls ?? this.invalid_tool_calls;
+        this.usage_metadata = initParams.usage_metadata;
     }
     get lc_aliases() {
         // exclude snake case conversion to pascal case
@@ -201,6 +215,27 @@ export class AIMessageChunk extends BaseMessageChunk {
             if (rawToolCalls !== undefined && rawToolCalls.length > 0) {
                 combinedFields.tool_call_chunks = rawToolCalls;
             }
+            if (
+                this.usage_metadata !== undefined ||
+                chunk.usage_metadata !== undefined
+            ) {
+                const left = this.usage_metadata ?? {
+                    input_tokens: 0,
+                    output_tokens: 0,
+                    total_tokens: 0,
+                };
+                const right = chunk.usage_metadata ?? {
+                    input_tokens: 0,
+                    output_tokens: 0,
+                    total_tokens: 0,
+                };
+                const usage_metadata = {
+                    input_tokens: left.input_tokens + right.input_tokens,
+                    output_tokens: left.output_tokens + right.output_tokens,
+                    total_tokens: left.total_tokens + right.total_tokens,
+                };
+                combinedFields.usage_metadata = usage_metadata;
+            }
         }
         return new AIMessageChunk(combinedFields);
     }
